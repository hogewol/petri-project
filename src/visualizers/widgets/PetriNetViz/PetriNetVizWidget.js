/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sun Nov 29 2020 19:07:38 GMT-0600 (Central Standard Time).
 */

define(['jointjs','css!./styles/PetriNetVizWidget.css','css!jointjscss'], function (jointjs) {
    'use strict';

    var WIDGET_CLASS = 'petri-net-viz';

    function PetriNetVizWidget(logger, container) {
        console.log(jointjs);
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PetriNetVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._graph = null;
        this._paper = null;

        this._graph = new jointjs.dia.Graph;
        this._paper = new jointjs.dia.Paper({
            el: $(this._el),
            width: width,
            height: height,
            gridSize: 1,
            defaultAnchor: {name: 'perpendicular'},
            defaultConnectionPoint: {name: 'boundary'},
            model: this._graph
        });

        // Since this is a simulator - we don't want user to move elements
        this._paper.setInteractivity(false);
        this._paper.removeTools();

        // Register when user clicks on an element
        this._paper.on('element:pointerdown', function(elementView) {
            var currentElement = elementView.model;
            console.log(currentElement);
        });

        // Create how we want shapes to look
        this._place = jointjs.dia.Element.define('network.Place', {
            size: { width: 50, height: 50 },
            attrs: {
                '.root': {
                    r: 25,
                    fill: '#ffffff',
                    stroke: '#000000',
                    transform: 'translate(25, 25)'
                },
                '.label': {
                    'text-anchor': 'middle',
                    'ref-x': .5,
                    'ref-y': -20,
                    ref: '.root',
                    fill: '#000000',
                    'font-size': 12
                },
                '.tokens > circle': {
                    fill: '#000000',
                    r: 5
                },
                '.tokens.one > circle': { transform: 'translate(25, 25)' },

                '.tokens.two > circle:nth-child(1)': { transform: 'translate(19, 25)' },
                '.tokens.two > circle:nth-child(2)': { transform: 'translate(31, 25)' },

                '.tokens.three > circle:nth-child(1)': { transform: 'translate(18, 29)' },
                '.tokens.three > circle:nth-child(2)': { transform: 'translate(25, 19)' },
                '.tokens.three > circle:nth-child(3)': { transform: 'translate(32, 29)' },

                '.tokens.alot > text': {
                    transform: 'translate(25, 18)',
                    'text-anchor': 'middle',
                    fill: '#000000'
                }
            }
        }, {
        markup: '<g class="rotatable"><g class="scalable"><circle class="root"/><g class="tokens" /></g><text class="label"/></g>',
        });
    };

    PetriNetVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
        if(this._paper) {
            this._paper.setDimensions(width,height);
            this._paper.scaleContentToFit();
        }
    };

    // Adding/Removing/Updating items
    PetriNetVizWidget.prototype.addNode = function (desc) {
        this.initNetwork();
    };

    PetriNetVizWidget.prototype.removeNode = function (gmeId) {

    };

    PetriNetVizWidget.prototype.updateNode = function (desc) {
 
    };

    // Simulation Function
    PetriNetVizWidget.prototype.initNetwork = function (descriptor) {

    };

    // Handling clicks
    PetriNetVizWidget.prototype.onElementClick = function(elementView, event) {
        event.stopPropagation();
        console.log(elementView);
    }

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetVizWidget.prototype.destroy = function () {
    };

    PetriNetVizWidget.prototype.onActivate = function () {
        this._logger.debug('PetriNetVizWidget has been activated');
    };

    PetriNetVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriNetVizWidget has been deactivated');
    };

    return PetriNetVizWidget;
});
